import "token.ninja";
import "precedence.ninja";
var lexer = import "lexer.ninja";

var GLOBAL_IDENT = 0;

function trace(msg) {

	function getIdent() {
		var out = GLOBAL_IDENT.string();
		for(var i = 0; i < GLOBAL_IDENT; i++) {
			out = out + "\t";
		}
		return out;
	}

	return [function() {
		puts(getIdent() + "Start " + msg)
		GLOBAL_IDENT++;
	}, function () {
		
		puts(getIdent() + "End " + msg)
		GLOBAL_IDENT--
	}]
}

return function parser(input) {

	var l = lexer(input);

	var nextLexerToken = l["nextToken"];


	var state = {
		"curToken": false,
		"peekToken": false,
		"statements": [],
	}

	function nextToken() {
		state["curToken"] = state["peekToken"]
		state["peekToken"] = nextLexerToken();
	}

	function infixOperator(left) {
		var operator = state["curToken"]["literal"];
		nextToken();
		var p = parseStatement();
		return infixAst(left, operator, parseStatement())
	}

	var arrPrefix = {
		TOKENS::DIGIT: function () {
			return digitAst(state["curToken"]["literal"].int());
		}
	}

	function parseExpression(precedence) {
		if (!arrPrefix.has(state["curToken"]["type"])) {
			return errorAst("prefix not found: " + state["curToken"]["literal"]);
		}
		var prefix = arrPrefix[state["curToken"]["type"]]

		var leftExp = prefix()
		if (precedence < peekPrecendece()) {
			if (!arrInfix.has(state["peekToken"]["type"])) {
				return leftExp;
			}
			nextToken()
			leftExp = arrInfix[state["curToken"]["type"]](leftExp);
		}

		return leftExp;
	}

	function prettyPrinter (ast) {
		var out = "";
		for (var i = 0; i <= len(ast)-1; i++) {
			var currentAst = ast[i];
			out = out + prettyFunctionExpression(currentAst)
		}
		return out;
	}

	function prettyFunctionExpression(ast) {

		if (ast.type() == "ARRAY") {
			return prettyPrinter(ast);
		}

		var out = "";
		if (!ast.has("type")) {
			out = out + " (current ast don't have type property);";
		} else {
			if (!prettyFunctions[ast["type"]]) {
				out = out + " (current ast pretty function " + ast["type"]  + ");";
			} else {
				out = out + prettyFunctions[ast["type"]](ast["expression"]);
			}
		}
		return out;
	}

	function prettyFunctionDigit(ast) {
		return ast.string();
	}

	function prettyFunctionInfix(ast) {
		if (!ast) {
			return "";
		}
		return "(" + prettyFunctionExpression(ast["left"]) + " " + ast["operator"] + " " + prettyFunctionExpression(ast["right"]["expression"]) + ")";
	}

	var prettyFunctions = {
		"digit": prettyFunctionDigit,
		"infix": prettyFunctionInfix,
		"expression": prettyFunctionExpression
	}

	var arrInfix = {
		TOKENS::PLUS: infixOperator,
		TOKENS::MINUS: infixOperator,
		TOKENS::ASTERISK: infixOperator,
		TOKENS::DIVIDED: infixOperator
	}

	var precedenceTokens = {
		TOKENS::DIGIT : PRECEDENCE::LOWEST,
		TOKENS::PLUS : PRECEDENCE::SUM,
		TOKENS::MINUS : PRECEDENCE::SUM,
		TOKENS::ASTERISK : PRECEDENCE::PRODUCT,
		TOKENS::DIVIDED : PRECEDENCE::PRODUCT
	};

	function errorAst(message) {
		return {"type": "ERROR", "message": message}
	}

	function expressionStatementAst() {
		return {"type": "expression", "expression": []}
	}

	function digitAst(literal) {
		return {"type": "digit", "expression": literal, "string": literal.string()}
	}

	function infixAst(left, operator, right) {
		return {"type": "infix", "expression": {"left": left, "operator": operator, "right": right}};
	}

	function parseStatement() {
		var t = trace("Parse Statement");
		t[0]();
		// nextToken(), PRECEDENCE::LOWEST)

		// swith by statement, but we don't have statement, only expressions...
		var a = parseExpressionStatement()
		t[1]();
		return a
	}

	function parseExpressionStatement() {
		var t = trace("Expression Statement");
		t[0]();

		var ast = expressionStatementAst();
		ast["expression"].push(parseExpression(PRECEDENCE::LOWEST));

		t[1]();
		return ast;
	}

	function peekPrecendece() {
		if (precedenceTokens.has(state["peekToken"]["type"])) {
			return precedenceTokens[state["peekToken"]["type"]];
		}
		return PRECEDENCE::LOWEST;
	}

	
	return {
		"prettyPrinter": prettyPrinter,
		"program": function () {
			nextToken();
			nextToken();
			for (;state["curToken"]["type"] != TOKENS::EOF;) {
				var t = trace("Program");
				t[0]();
				var stmt = parseStatement();

				if (stmt) {
					state["statements"].push(stmt)
				}

				nextToken();
				t[1]();
			}
			return state["statements"];
		}
	}
}